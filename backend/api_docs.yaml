
openapi: 3.0.0
info:
  title: Broman Real Estate Accounting API
  version: 1.0.0
  description: API for managing financial operations of Broman Real Estate, including sales, expenses, rentals, finishing works, and user management.

servers:
  - url: /api
    description: Base URL for API endpoints

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id: {type: integer, readOnly: true}
        username: {type: string, unique: true}
        email: {type: string, unique: true}
        first_name: {type: string}
        last_name: {type: string}
        role_id: {type: integer}
        is_active: {type: boolean}
        created_at: {type: string, format: date-time, readOnly: true}
        updated_at: {type: string, format: date-time, readOnly: true}
        role_name: {type: string, readOnly: true}
    Role:
      type: object
      properties:
        id: {type: integer, readOnly: true}
        name: {type: string, unique: true}
        description: {type: string}
        created_at: {type: string, format: date-time, readOnly: true}
        updated_at: {type: string, format: date-time, readOnly: true}
    Permission:
      type: object
      properties:
        id: {type: integer, readOnly: true}
        name: {type: string, unique: true}
        description: {type: string}
    RolePermission:
      type: object
      properties:
        id: {type: integer, readOnly: true}
        role_id: {type: integer}
        permission_id: {type: integer}
        can_view: {type: boolean}
        can_create: {type: boolean}
        can_edit: {type: boolean}
        can_delete: {type: boolean}
        permission_name: {type: string, readOnly: true}
    Unit:
      type: object
      properties:
        id: {type: integer, readOnly: true}
        code: {type: string, unique: true}
        type: {type: string, enum: [شقة, تجاري, إداري, طبي]}
        price: {type: number, format: float}
        address: {type: string}
        area_sqm: {type: number, format: float}
        description_ar: {type: string}
        description_en: {type: string}
        status: {type: string, enum: [متاحة, مباعة, مؤجرة, تحت التشطيب]}
        created_at: {type: string, format: date-time, readOnly: true}
        updated_at: {type: string, format: date-time, readOnly: true}
    Sale:
      type: object
      properties:
        id: {type: integer, readOnly: true}
        unit_id: {type: integer}
        client_name: {type: string}
        sale_date: {type: string, format: date}
        sale_price: {type: number, format: float}
        salesperson_id: {type: integer}
        sales_manager_id: {type: integer, nullable: true}
        company_commission: {type: number, format: float, readOnly: true}
        salesperson_commission: {type: number, format: float, readOnly: true}
        sales_manager_commission: {type: number, format: float, readOnly: true}
        total_taxes: {type: number, format: float, readOnly: true}
        net_company_revenue: {type: number, format: float, readOnly: true}
        notes: {type: string, nullable: true}
        created_at: {type: string, format: date-time, readOnly: true}
        updated_at: {type: string, format: date-time, readOnly: true}
        unit_code: {type: string, readOnly: true}
        salesperson_name: {type: string, readOnly: true}
        sales_manager_name: {type: string, readOnly: true}
    ExpenseCategory:
      type: object
      properties:
        id: {type: integer, readOnly: true}
        name_ar: {type: string, unique: true}
        name_en: {type: string, unique: true}
        description_ar: {type: string, nullable: true}
        description_en: {type: string, nullable: true}
        created_at: {type: string, format: date-time, readOnly: true}
        updated_at: {type: string, format: date-time, readOnly: true}
    Expense:
      type: object
      properties:
        id: {type: integer, readOnly: true}
        description_ar: {type: string}
        description_en: {type: string, nullable: true}
        amount: {type: number, format: float}
        expense_date: {type: string, format: date}
        category_id: {type: integer}
        user_id: {type: integer}
        notes: {type: string, nullable: true}
        created_at: {type: string, format: date-time, readOnly: true}
        updated_at: {type: string, format: date-time, readOnly: true}
        category_name_ar: {type: string, readOnly: true}
        user_name: {type: string, readOnly: true}
    Rental:
      type: object
      properties:
        id: {type: integer, readOnly: true}
        unit_id: {type: integer}
        tenant_name: {type: string}
        start_date: {type: string, format: date}
        end_date: {type: string, format: date}
        rent_amount: {type: number, format: float}
        payment_frequency: {type: string, enum: [شهري, ربع سنوي, نصف سنوي, سنوي]}
        notes: {type: string, nullable: true}
        created_at: {type: string, format: date-time, readOnly: true}
        updated_at: {type: string, format: date-time, readOnly: true}
        unit_code: {type: string, readOnly: true}
    RentalPayment:
      type: object
      properties:
        id: {type: integer, readOnly: true}
        rental_id: {type: integer}
        payment_date: {type: string, format: date}
        amount: {type: number, format: float}
        status: {type: string, enum: [مدفوعة, مستحقة, متأخرة]}
        notes: {type: string, nullable: true}
        created_at: {type: string, format: date-time, readOnly: true}
        updated_at: {type: string, format: date-time, readOnly: true}
        rental_tenant_name: {type: string, readOnly: true}
        rental_unit_code: {type: string, readOnly: true}
    FinishingWork:
      type: object
      properties:
        id: {type: integer, readOnly: true}
        unit_id: {type: integer}
        project_name_ar: {type: string}
        project_name_en: {type: string, nullable: true}
        start_date: {type: string, format: date}
        end_date: {type: string, format: date, nullable: true}
        budget: {type: number, format: float}
        actual_cost: {type: number, format: float, readOnly: true}
        status: {type: string, enum: [قيد التنفيذ, مكتملة, متوقفة]}
        notes: {type: string, nullable: true}
        created_at: {type: string, format: date-time, readOnly: true}
        updated_at: {type: string, format: date-time, readOnly: true}
        unit_code: {type: string, readOnly: true}
    FinishingWorkExpense:
      type: object
      properties:
        id: {type: integer, readOnly: true}
        finishing_work_id: {type: integer}
        description_ar: {type: string}
        description_en: {type: string, nullable: true}
        amount: {type: number, format: float}
        expense_date: {type: string, format: date}
        notes: {type: string, nullable: true}
        created_at: {type: string, format: date-time, readOnly: true}
        updated_at: {type: string, format: date-time, readOnly: true}
        finishing_work_project_name_ar: {type: string, readOnly: true}
    FinancialSetting:
      type: object
      properties:
        id: {type: integer, readOnly: true}
        key: {type: string, unique: true}
        value: {type: string}
        type: {type: string, enum: [percentage, fixed_amount, text, json]}
        description_ar: {type: string, nullable: true}
        description_en: {type: string, nullable: true}
        is_active: {type: boolean}
        created_at: {type: string, format: date-time, readOnly: true}
        updated_at: {type: string, format: date-time, readOnly: true}
    Template:
      type: object
      properties:
        id: {type: integer, readOnly: true}
        name: {type: string, unique: true}
        type: {type: string, enum: [invoice, check]}
        content: {type: string, description: 'JSON string of the template structure'}
        is_active: {type: boolean}
        created_at: {type: string, format: date-time, readOnly: true}
        updated_at: {type: string, format: date-time, readOnly: true}
    CashierBalance:
      type: object
      properties:
        id: {type: integer, readOnly: true}
        balance: {type: number, format: float}
        last_updated_at: {type: string, format: date-time}
    CashierTransaction:
      type: object
      properties:
        id: {type: integer, readOnly: true}
        transaction_date: {type: string, format: date-time}
        amount: {type: number, format: float}
        transaction_type: {type: string}
        reference_id: {type: integer, nullable: true}
        notes: {type: string, nullable: true}
        user_id: {type: integer}
        user_name: {type: string, readOnly: true}

paths:
  /auth/register:
    post:
      summary: Register a new user (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, email, password, first_name, last_name, role_id]
              properties:
                username: {type: string}
                email: {type: string}
                password: {type: string}
                first_name: {type: string}
                last_name: {type: string}
                role_id: {type: integer}
      responses:
        201: {description: User registered successfully}
        400: {description: Missing required fields}
        403: {description: Forbidden}
        409: {description: User already exists}

  /auth/login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username: {type: string}
                password: {type: string}
      responses:
        200: {description: Login successful, returns access token and user info}
        400: {description: Missing username or password}
        401: {description: Bad username or password}

  /auth/me:
    get:
      summary: Get current user information
      security:
        - BearerAuth: []
      responses:
        200: {description: Current user info, content: {application/json: {schema: {$ref: '#/components/schemas/User'}}}}
        401: {description: Unauthorized}
        404: {description: User not found}

  /auth/users:
    get:
      summary: Get all users (Permission required: manage_users, view)
      security:
        - BearerAuth: []
      responses:
        200: {description: List of users, content: {application/json: {schema: {type: array, items: {$ref: '#/components/schemas/User'}}}}}
        403: {description: Forbidden}
    post:
      summary: Register a new user (Admin only - same as /auth/register but with permission check)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, email, password, first_name, last_name, role_id]
              properties:
                username: {type: string}
                email: {type: string}
                password: {type: string}
                first_name: {type: string}
                last_name: {type: string}
                role_id: {type: integer}
      responses:
        201: {description: User registered successfully}
        400: {description: Missing required fields}
        403: {description: Forbidden}
        409: {description: User already exists}

  /auth/users/{user_id}:
    get:
      summary: Get user by ID (Permission required: manage_users, view)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: user_id
          schema: {type: integer}
          required: true
          description: ID of the user to retrieve
      responses:
        200: {description: User info, content: {application/json: {schema: {$ref: '#/components/schemas/User'}}}}
        403: {description: Forbidden}
        404: {description: User not found}
    put:
      summary: Update user by ID (Permission required: manage_users, edit)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: user_id
          schema: {type: integer}
          required: true
          description: ID of the user to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username: {type: string}
                email: {type: string}
                password: {type: string}
                first_name: {type: string}
                last_name: {type: string}
                role_id: {type: integer}
                is_active: {type: boolean}
      responses:
        200: {description: User updated successfully}
        403: {description: Forbidden}
        404: {description: User not found}
    delete:
      summary: Delete user by ID (Permission required: manage_users, delete)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: user_id
          schema: {type: integer}
          required: true
          description: ID of the user to delete
      responses:
        200: {description: User deleted successfully}
        403: {description: Forbidden}
        404: {description: User not found}

  /auth/roles:
    get:
      summary: Get all roles (Permission required: manage_roles, view)
      security:
        - BearerAuth: []
      responses:
        200: {description: List of roles, content: {application/json: {schema: {type: array, items: {$ref: '#/components/schemas/Role'}}}}}
        403: {description: Forbidden}
    post:
      summary: Create a new role (Permission required: manage_roles, create)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: {type: string}
                description: {type: string}
      responses:
        201: {description: Role created successfully}
        400: {description: Role name is required}
        403: {description: Forbidden}
        409: {description: Role already exists}

  /auth/roles/{role_id}:
    put:
      summary: Update role by ID (Permission required: manage_roles, edit)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: role_id
          schema: {type: integer}
          required: true
          description: ID of the role to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: {type: string}
                description: {type: string}
      responses:
        200: {description: Role updated successfully}
        403: {description: Forbidden}
        404: {description: Role not found}
    delete:
      summary: Delete role by ID (Permission required: manage_roles, delete)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: role_id
          schema: {type: integer}
          required: true
          description: ID of the role to delete
      responses:
        200: {description: Role deleted successfully}
        400: {description: Cannot delete role with assigned users}
        403: {description: Forbidden}
        404: {description: Role not found}

  /auth/permissions/all:
    get:
      summary: Get all available permissions (Permission required: manage_roles, view)
      security:
        - BearerAuth: []
      responses:
        200: {description: List of all permissions, content: {application/json: {schema: {type: array, items: {$ref: '#/components/schemas/Permission'}}}}}
        403: {description: Forbidden}

  /auth/roles/{role_id}/permissions:
    get:
      summary: Get permissions for a specific role (Permission required: manage_roles, view)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: role_id
          schema: {type: integer}
          required: true
          description: ID of the role to retrieve permissions for
      responses:
        200: {description: List of role permissions, content: {application/json: {schema: {type: array, items: {$ref: '#/components/schemas/RolePermission'}}}}}
        403: {description: Forbidden}
        404: {description: Role not found}
    post:
      summary: Update permissions for a specific role (Permission required: manage_roles, edit)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: role_id
          schema: {type: integer}
          required: true
          description: ID of the role to update permissions for
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                permissions:
                  type: array
                  items:
                    type: object
                    properties:
                      permission_id: {type: integer}
                      can_view: {type: boolean}
                      can_create: {type: boolean}
                      can_edit: {type: boolean}
                      can_delete: {type: boolean}
      responses:
        200: {description: Role permissions updated successfully}
        403: {description: Forbidden}
        404: {description: Role not found}

  /units/units:
    get:
      summary: Get all units (Permission required: manage_units, view)
      security:
        - BearerAuth: []
      responses:
        200: {description: List of units, content: {application/json: {schema: {type: array, items: {$ref: '#/components/schemas/Unit'}}}}}
        403: {description: Forbidden}
    post:
      summary: Create a new unit (Permission required: manage_units, create)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [code, type, price]
              properties:
                code: {type: string}
                type: {type: string, enum: [شقة, تجاري, إداري, طبي]}
                price: {type: number, format: float}
                address: {type: string}
                area_sqm: {type: number, format: float}
                description_ar: {type: string}
                description_en: {type: string}
                status: {type: string, enum: [متاحة, مباعة, مؤجرة, تحت التشطيب]}
      responses:
        201: {description: Unit created successfully}
        400: {description: Missing required fields}
        403: {description: Forbidden}
        409: {description: Unit with this code already exists}

  /units/units/{unit_id}:
    get:
      summary: Get unit by ID (Permission required: manage_units, view)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: unit_id
          schema: {type: integer}
          required: true
          description: ID of the unit to retrieve
      responses:
        200: {description: Unit info, content: {application/json: {schema: {$ref: '#/components/schemas/Unit'}}}}
        403: {description: Forbidden}
        404: {description: Unit not found}
    put:
      summary: Update unit by ID (Permission required: manage_units, edit)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: unit_id
          schema: {type: integer}
          required: true
          description: ID of the unit to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code: {type: string}
                type: {type: string, enum: [شقة, تجاري, إداري, طبي]}
                price: {type: number, format: float}
                address: {type: string}
                area_sqm: {type: number, format: float}
                description_ar: {type: string}
                description_en: {type: string}
                status: {type: string, enum: [متاحة, مباعة, مؤجرة, تحت التشطيب]}
      responses:
        200: {description: Unit updated successfully}
        403: {description: Forbidden}
        404: {description: Unit not found}
    delete:
      summary: Delete unit by ID (Permission required: manage_units, delete)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: unit_id
          schema: {type: integer}
          required: true
          description: ID of the unit to delete
      responses:
        200: {description: Unit deleted successfully}
        403: {description: Forbidden}
        404: {description: Unit not found}

  /sales/sales:
    get:
      summary: Get all sales (Permission required: manage_sales, view)
      security:
        - BearerAuth: []
      responses:
        200: {description: List of sales, content: {application/json: {schema: {type: array, items: {$ref: '#/components/schemas/Sale'}}}}}
        403: {description: Forbidden}
    post:
      summary: Create a new sale (Permission required: manage_sales, create)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [unit_id, client_name, sale_date, sale_price, salesperson_id]
              properties:
                unit_id: {type: integer}
                client_name: {type: string}
                sale_date: {type: string, format: date, description: 'Format YYYY-MM-DD'}
                sale_price: {type: number, format: float}
                salesperson_id: {type: integer}
                sales_manager_id: {type: integer, nullable: true}
                notes: {type: string, nullable: true}
      responses:
        201: {description: Sale created successfully}
        400: {description: Missing required fields or invalid format}
        403: {description: Forbidden}
        404: {description: Unit or user not found}

  /sales/sales/{sale_id}:
    get:
      summary: Get sale by ID (Permission required: manage_sales, view)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: sale_id
          schema: {type: integer}
          required: true
          description: ID of the sale to retrieve
      responses:
        200: {description: Sale info, content: {application/json: {schema: {$ref: '#/components/schemas/Sale'}}}}
        403: {description: Forbidden}
        404: {description: Sale not found}
    put:
      summary: Update sale by ID (Permission required: manage_sales, edit)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: sale_id
          schema: {type: integer}
          required: true
          description: ID of the sale to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                unit_id: {type: integer}
                client_name: {type: string}
                sale_date: {type: string, format: date, description: 'Format YYYY-MM-DD'}
                sale_price: {type: number, format: float}
                salesperson_id: {type: integer}
                sales_manager_id: {type: integer, nullable: true}
                notes: {type: string, nullable: true}
      responses:
        200: {description: Sale updated successfully}
        400: {description: Invalid date or price format}
        403: {description: Forbidden}
        404: {description: Sale or unit or user not found}
    delete:
      summary: Delete sale by ID (Permission required: manage_sales, delete)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: sale_id
          schema: {type: integer}
          required: true
          description: ID of the sale to delete
      responses:
        200: {description: Sale deleted successfully}
        403: {description: Forbidden}
        404: {description: Sale not found}

  /expenses/expense_categories:
    get:
      summary: Get all expense categories (Permission required: manage_expenses, view)
      security:
        - BearerAuth: []
      responses:
        200: {description: List of expense categories, content: {application/json: {schema: {type: array, items: {$ref: '#/components/schemas/ExpenseCategory'}}}}}
        403: {description: Forbidden}
    post:
      summary: Create a new expense category (Permission required: manage_expenses, create)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name_ar, name_en]
              properties:
                name_ar: {type: string}
                name_en: {type: string}
                description_ar: {type: string}
                description_en: {type: string}
      responses:
        201: {description: Expense category created successfully}
        400: {description: Missing required fields}
        403: {description: Forbidden}
        409: {description: Category with this name already exists}

  /expenses/expense_categories/{category_id}:
    put:
      summary: Update expense category by ID (Permission required: manage_expenses, edit)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: category_id
          schema: {type: integer}
          required: true
          description: ID of the expense category to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name_ar: {type: string}
                name_en: {type: string}
                description_ar: {type: string}
                description_en: {type: string}
      responses:
        200: {description: Expense category updated successfully}
        403: {description: Forbidden}
        404: {description: Category not found}
    delete:
      summary: Delete expense category by ID (Permission required: manage_expenses, delete)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: category_id
          schema: {type: integer}
          required: true
          description: ID of the expense category to delete
      responses:
        200: {description: Expense category deleted successfully}
        400: {description: Cannot delete category with associated expenses}
        403: {description: Forbidden}
        404: {description: Category not found}

  /expenses/expenses:
    get:
      summary: Get all expenses (Permission required: manage_expenses, view)
      security:
        - BearerAuth: []
      responses:
        200: {description: List of expenses, content: {application/json: {schema: {type: array, items: {$ref: '#/components/schemas/Expense'}}}}}
        403: {description: Forbidden}
    post:
      summary: Create a new expense (Permission required: manage_expenses, create)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [description_ar, amount, expense_date, category_id]
              properties:
                description_ar: {type: string}
                description_en: {type: string}
                amount: {type: number, format: float}
                expense_date: {type: string, format: date, description: 'Format YYYY-MM-DD'}
                category_id: {type: integer}
                notes: {type: string}
      responses:
        201: {description: Expense created successfully}
        400: {description: Missing required fields or invalid format}
        403: {description: Forbidden}
        404: {description: Category not found}

  /expenses/expenses/{expense_id}:
    get:
      summary: Get expense by ID (Permission required: manage_expenses, view)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: expense_id
          schema: {type: integer}
          required: true
          description: ID of the expense to retrieve
      responses:
        200: {description: Expense info, content: {application/json: {schema: {$ref: '#/components/schemas/Expense'}}}}
        403: {description: Forbidden}
        404: {description: Expense not found}
    put:
      summary: Update expense by ID (Permission required: manage_expenses, edit)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: expense_id
          schema: {type: integer}
          required: true
          description: ID of the expense to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description_ar: {type: string}
                description_en: {type: string}
                amount: {type: number, format: float}
                expense_date: {type: string, format: date, description: 'Format YYYY-MM-DD'}
                category_id: {type: integer}
                notes: {type: string}
      responses:
        200: {description: Expense updated successfully}
        400: {description: Invalid date or amount format}
        403: {description: Forbidden}
        404: {description: Expense or category not found}
    delete:
      summary: Delete expense by ID (Permission required: manage_expenses, delete)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: expense_id
          schema: {type: integer}
          required: true
          description: ID of the expense to delete
      responses:
        200: {description: Expense deleted successfully}
        403: {description: Forbidden}
        404: {description: Expense not found}

  /rentals/rentals:
    get:
      summary: Get all rentals (Permission required: manage_rentals, view)
      security:
        - BearerAuth: []
      responses:
        200: {description: List of rentals, content: {application/json: {schema: {type: array, items: {$ref: '#/components/schemas/Rental'}}}}}
        403: {description: Forbidden}
    post:
      summary: Create a new rental (Permission required: manage_rentals, create)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [unit_id, tenant_name, start_date, end_date, rent_amount, payment_frequency]
              properties:
                unit_id: {type: integer}
                tenant_name: {type: string}
                start_date: {type: string, format: date, description: 'Format YYYY-MM-DD'}
                end_date: {type: string, format: date, description: 'Format YYYY-MM-DD'}
                rent_amount: {type: number, format: float}
                payment_frequency: {type: string, enum: [شهري, ربع سنوي, نصف سنوي, سنوي]}
                notes: {type: string}
      responses:
        201: {description: Rental created successfully}
        400: {description: Missing required fields or invalid format}
        403: {description: Forbidden}
        404: {description: Unit not found}

  /rentals/rentals/{rental_id}:
    get:
      summary: Get rental by ID (Permission required: manage_rentals, view)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: rental_id
          schema: {type: integer}
          required: true
          description: ID of the rental to retrieve
      responses:
        200: {description: Rental info, content: {application/json: {schema: {$ref: '#/components/schemas/Rental'}}}}
        403: {description: Forbidden}
        404: {description: Rental not found}
    put:
      summary: Update rental by ID (Permission required: manage_rentals, edit)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: rental_id
          schema: {type: integer}
          required: true
          description: ID of the rental to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                unit_id: {type: integer}
                tenant_name: {type: string}
                start_date: {type: string, format: date, description: 'Format YYYY-MM-DD'}
                end_date: {type: string, format: date, description: 'Format YYYY-MM-DD'}
                rent_amount: {type: number, format: float}
                payment_frequency: {type: string, enum: [شهري, ربع سنوي, نصف سنوي, سنوي]}
                notes: {type: string}
      responses:
        200: {description: Rental updated successfully}
        400: {description: Invalid date or amount format}
        403: {description: Forbidden}
        404: {description: Rental or unit not found}
    delete:
      summary: Delete rental by ID (Permission required: manage_rentals, delete)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: rental_id
          schema: {type: integer}
          required: true
          description: ID of the rental to delete
      responses:
        200: {description: Rental deleted successfully}
        403: {description: Forbidden}
        404: {description: Rental not found}

  /rentals/rentals/{rental_id}/payments:
    get:
      summary: Get all payments for a specific rental (Permission required: manage_rentals, view)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: rental_id
          schema: {type: integer}
          required: true
          description: ID of the rental to retrieve payments for
      responses:
        200: {description: List of rental payments, content: {application/json: {schema: {type: array, items: {$ref: '#/components/schemas/RentalPayment'}}}}}
        403: {description: Forbidden}
        404: {description: Rental not found}
    post:
      summary: Add a new payment to a rental (Permission required: manage_rentals, create)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: rental_id
          schema: {type: integer}
          required: true
          description: ID of the rental to add payment to
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [payment_date, amount]
              properties:
                payment_date: {type: string, format: date, description: 'Format YYYY-MM-DD'}
                amount: {type: number, format: float}
                status: {type: string, enum: [مدفوعة, مستحقة, متأخرة]}
                notes: {type: string}
      responses:
        201: {description: Rental payment added successfully}
        400: {description: Missing required fields or invalid format}
        403: {description: Forbidden}
        404: {description: Rental not found}

  /rentals/rental_payments/{payment_id}:
    put:
      summary: Update rental payment by ID (Permission required: manage_rentals, edit)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: payment_id
          schema: {type: integer}
          required: true
          description: ID of the rental payment to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                payment_date: {type: string, format: date, description: 'Format YYYY-MM-DD'}
                amount: {type: number, format: float}
                status: {type: string, enum: [مدفوعة, مستحقة, متأخرة]}
                notes: {type: string}
      responses:
        200: {description: Rental payment updated successfully}
        400: {description: Invalid date or amount format}
        403: {description: Forbidden}
        404: {description: Rental payment not found}
    delete:
      summary: Delete rental payment by ID (Permission required: manage_rentals, delete)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: payment_id
          schema: {type: integer}
          required: true
          description: ID of the rental payment to delete
      responses:
        200: {description: Rental payment deleted successfully}
        403: {description: Forbidden}
        404: {description: Rental payment not found}

  /finishing_works/finishing_works:
    get:
      summary: Get all finishing work projects (Permission required: manage_finishing_works, view)
      security:
        - BearerAuth: []
      responses:
        200: {description: List of finishing work projects, content: {application/json: {schema: {type: array, items: {$ref: '#/components/schemas/FinishingWork'}}}}}
        403: {description: Forbidden}
    post:
      summary: Create a new finishing work project (Permission required: manage_finishing_works, create)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [unit_id, project_name_ar, start_date, budget]
              properties:
                unit_id: {type: integer}
                project_name_ar: {type: string}
                project_name_en: {type: string}
                start_date: {type: string, format: date, description: 'Format YYYY-MM-DD'}
                end_date: {type: string, format: date, description: 'Format YYYY-MM-DD', nullable: true}
                budget: {type: number, format: float}
                status: {type: string, enum: [قيد التنفيذ, مكتملة, متوقفة]}
                notes: {type: string}
      responses:
        201: {description: Finishing work project created successfully}
        400: {description: Missing required fields or invalid format}
        403: {description: Forbidden}
        404: {description: Unit not found}

  /finishing_works/finishing_works/{fw_id}:
    get:
      summary: Get finishing work project by ID (Permission required: manage_finishing_works, view)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: fw_id
          schema: {type: integer}
          required: true
          description: ID of the finishing work project to retrieve
      responses:
        200: {description: Finishing work project info, content: {application/json: {schema: {$ref: '#/components/schemas/FinishingWork'}}}}
        403: {description: Forbidden}
        404: {description: Finishing work project not found}
    put:
      summary: Update finishing work project by ID (Permission required: manage_finishing_works, edit)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: fw_id
          schema: {type: integer}
          required: true
          description: ID of the finishing work project to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                unit_id: {type: integer}
                project_name_ar: {type: string}
                project_name_en: {type: string}
                start_date: {type: string, format: date, description: 'Format YYYY-MM-DD'}
                end_date: {type: string, format: date, description: 'Format YYYY-MM-DD', nullable: true}
                budget: {type: number, format: float}
                actual_cost: {type: number, format: float}
                status: {type: string, enum: [قيد التنفيذ, مكتملة, متوقفة]}
                notes: {type: string}
      responses:
        200: {description: Finishing work project updated successfully}
        400: {description: Invalid date or amount format}
        403: {description: Forbidden}
        404: {description: Finishing work project or unit not found}
    delete:
      summary: Delete finishing work project by ID (Permission required: manage_finishing_works, delete)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: fw_id
          schema: {type: integer}
          required: true
          description: ID of the finishing work project to delete
      responses:
        200: {description: Finishing work project deleted successfully}
        403: {description: Forbidden}
        404: {description: Finishing work project not found}

  /finishing_works/finishing_works/{fw_id}/expenses:
    get:
      summary: Get all expenses for a specific finishing work project (Permission required: manage_finishing_works, view)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: fw_id
          schema: {type: integer}
          required: true
          description: ID of the finishing work project to retrieve expenses for
      responses:
        200: {description: List of finishing work expenses, content: {application/json: {schema: {type: array, items: {$ref: '#/components/schemas/FinishingWorkExpense'}}}}}
        403: {description: Forbidden}
        404: {description: Finishing work project not found}
    post:
      summary: Add a new expense to a finishing work project (Permission required: manage_finishing_works, create)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: fw_id
          schema: {type: integer}
          required: true
          description: ID of the finishing work project to add expense to
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [description_ar, amount, expense_date]
              properties:
                description_ar: {type: string}
                description_en: {type: string}
                amount: {type: number, format: float}
                expense_date: {type: string, format: date, description: 'Format YYYY-MM-DD'}
                notes: {type: string}
      responses:
        201: {description: Finishing work expense added successfully}
        400: {description: Missing required fields or invalid format}
        403: {description: Forbidden}
        404: {description: Finishing work project not found}

  /finishing_works/finishing_work_expenses/{expense_id}:
    put:
      summary: Update finishing work expense by ID (Permission required: manage_finishing_works, edit)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: expense_id
          schema: {type: integer}
          required: true
          description: ID of the finishing work expense to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description_ar: {type: string}
                description_en: {type: string}
                amount: {type: number, format: float}
                expense_date: {type: string, format: date, description: 'Format YYYY-MM-DD'}
                notes: {type: string}
      responses:
        200: {description: Finishing work expense updated successfully}
        400: {description: Invalid date or amount format}
        403: {description: Forbidden}
        404: {description: Finishing work expense not found}
    delete:
      summary: Delete finishing work expense by ID (Permission required: manage_finishing_works, delete)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: expense_id
          schema: {type: integer}
          required: true
          description: ID of the finishing work expense to delete
      responses:
        200: {description: Finishing work expense deleted successfully}
        403: {description: Forbidden}
        404: {description: Finishing work expense not found}

  /settings/financial_settings:
    get:
      summary: Get all financial settings (Permission required: manage_settings, view)
      security:
        - BearerAuth: []
      responses:
        200: {description: List of financial settings, content: {application/json: {schema: {type: array, items: {$ref: '#/components/schemas/FinancialSetting'}}}}}
        403: {description: Forbidden}
    post:
      summary: Create a new financial setting (Permission required: manage_settings, create)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [key, value, type]
              properties:
                key: {type: string}
                value: {type: string}
                type: {type: string, enum: [percentage, fixed_amount, text, json]}
                description_ar: {type: string}
                description_en: {type: string}
      responses:
        201: {description: Financial setting created successfully}
        400: {description: Missing required fields}
        403: {description: Forbidden}
        409: {description: Setting with this key already exists}

  /settings/financial_settings/{setting_id}:
    get:
      summary: Get financial setting by ID (Permission required: manage_settings, view)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: setting_id
          schema: {type: integer}
          required: true
          description: ID of the financial setting to retrieve
      responses:
        200: {description: Financial setting info, content: {application/json: {schema: {$ref: '#/components/schemas/FinancialSetting'}}}}
        403: {description: Forbidden}
        404: {description: Financial setting not found}
    put:
      summary: Update financial setting by ID (Permission required: manage_settings, edit)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: setting_id
          schema: {type: integer}
          required: true
          description: ID of the financial setting to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                key: {type: string}
                value: {type: string}
                type: {type: string, enum: [percentage, fixed_amount, text, json]}
                description_ar: {type: string}
                description_en: {type: string}
                is_active: {type: boolean}
      responses:
        200: {description: Financial setting updated successfully}
        403: {description: Forbidden}
        404: {description: Financial setting not found}
    delete:
      summary: Delete financial setting by ID (Permission required: manage_settings, delete)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: setting_id
          schema: {type: integer}
          required: true
          description: ID of the financial setting to delete
      responses:
        200: {description: Financial setting deleted successfully}
        403: {description: Forbidden}
        404: {description: Financial setting not found}

  /settings/templates:
    get:
      summary: Get all templates (invoice/check) (Permission required: manage_settings, view)
      security:
        - BearerAuth: []
      responses:
        200: {description: List of templates, content: {application/json: {schema: {type: array, items: {$ref: '#/components/schemas/Template'}}}}}
        403: {description: Forbidden}
    post:
      summary: Create a new template (Permission required: manage_settings, create)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, type, content]
              properties:
                name: {type: string}
                type: {type: string, enum: [invoice, check]}
                content: {type: string, description: 'JSON string of the template structure'}
      responses:
        201: {description: Template created successfully}
        400: {description: Missing required fields or invalid JSON content}
        403: {description: Forbidden}
        409: {description: Template with this name already exists}

  /settings/templates/{template_id}:
    get:
      summary: Get template by ID (Permission required: manage_settings, view)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: template_id
          schema: {type: integer}
          required: true
          description: ID of the template to retrieve
      responses:
        200: {description: Template info, content: {application/json: {schema: {$ref: '#/components/schemas/Template'}}}}
        403: {description: Forbidden}
        404: {description: Template not found}
    put:
      summary: Update template by ID (Permission required: manage_settings, edit)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: template_id
          schema: {type: integer}
          required: true
          description: ID of the template to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: {type: string}
                type: {type: string, enum: [invoice, check]}
                content: {type: string, description: 'JSON string of the template structure'}
                is_active: {type: boolean}
      responses:
        200: {description: Template updated successfully}
        400: {description: Invalid JSON content}
        403: {description: Forbidden}
        404: {description: Template not found}
    delete:
      summary: Delete template by ID (Permission required: manage_settings, delete)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: template_id
          schema: {type: integer}
          required: true
          description: ID of the template to delete
      responses:
        200: {description: Template deleted successfully}
        403: {description: Forbidden}
        404: {description: Template not found}

  /reports/expenses:
    get:
      summary: Get expenses report (Permission required: view_reports, view)
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: start_date
          schema: {type: string, format: date, description: 'Format YYYY-MM-DD'}
          required: false
        - in: query
          name: end_date
          schema: {type: string, format: date, description: 'Format YYYY-MM-DD'}
          required: false
        - in: query
          name: category_id
          schema: {type: integer}
          required: false
      responses:
        200: {description: Expenses report data, content: {application/json: {schema: {type: array, items: {$ref: '#/components/schemas/Expense'}}}}}
        400: {description: Invalid date format}
        403: {description: Forbidden}

  /reports/revenue:
    get:
      summary: Get revenue report (Permission required: view_reports, view)
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: start_date
          schema: {type: string, format: date, description: 'Format YYYY-MM-DD'}
          required: false
        - in: query
          name: end_date
          schema: {type: string, format: date, description: 'Format YYYY-MM-DD'}
          required: false
      responses:
        200: {description: Revenue report data, content: {application/json: {schema: {type: array, items: {type: object, properties: {type: {type: string}, date: {type: string, format: date}, description: {type: string}, amount: {type: number, format: float}}}}}}}
        400: {description: Invalid date format}
        403: {description: Forbidden}

  /reports/profit_loss:
    get:
      summary: Get profit and loss report (Permission required: view_reports, view)
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: start_date
          schema: {type: string, format: date, description: 'Format YYYY-MM-DD'}
          required: false
        - in: query
          name: end_date
          schema: {type: string, format: date, description: 'Format YYYY-MM-DD'}
          required: false
      responses:
        200: {description: Profit and loss report data, content: {application/json: {schema: {type: object, properties: {total_revenue: {type: number, format: float}, total_expenses: {type: number, format: float}, net_profit_loss: {type: number, format: float}}}}}}
        400: {description: Invalid date format}
        403: {description: Forbidden}

  /reports/cashier_transactions:
    get:
      summary: Get cashier transactions report (Permission required: view_reports, view)
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: start_date
          schema: {type: string, format: date, description: 'Format YYYY-MM-DD'}
          required: false
        - in: query
          name: end_date
          schema: {type: string, format: date, description: 'Format YYYY-MM-DD'}
          required: false
        - in: query
          name: transaction_type
          schema: {type: string}
          required: false
      responses:
        200: {description: Cashier transactions report data, content: {application/json: {schema: {type: array, items: {$ref: '#/components/schemas/CashierTransaction'}}}}}
        400: {description: Invalid date format}
        403: {description: Forbidden}


